template(name="dashboardNav")
    #layout-nav
      .layout-nav-left
        .layout-nav-head REST2DDP Dashboard
      .layout-nav-right
        .layout-nav-item
          +loginButtons

template(name="dashboard")
  #dashboard
    +if currentUser
      +dashboardNav

      .left-column
        #configurations
          ul.config-listing
            +each ApiConfigs
              +if isActive _id
                li.active
                  | {{name}}
                  .arrow
              +else
                li {{name}}

          .add-btn +

    .right-column
      strong REST2DDP
      | allows you to convert a standard REST API into a simple near-realtime DDP endpoint which your simply subscribe to in your own Meteor app.
      hr

      +if activeConfig
        +unless currentUser
          //- * * * THIS IS THE LANDING EXAMPLE DASHBOARD * * *
          #fields
            +autoForm(id="ApiConfigs" doc=activeConfig collection="ApiConfigs")
              fieldset
                legend Configuration
                +afQuickField name="name" disabled=true
                +afQuickField name="collectionName" disabled=true
                +afQuickField name="jsonPath" disabled=true
                +afQuickField name="restUrl" disabled=true
                +afQuickField name="pollInterval" disabled=true

            legend(style="margin-top: 25px;") Output
            .left
              h4 Raw API Response
              br
              h5 Status Code: {{output.statusCode}}
              br
              h5 Headers
              table.table              
                thead
                  tr
                    th Header Name
                    th Header Value
                tbody
                  +each toArray output.headers
                    tr
                      +each this
                        td {{this}}

              h5 Body Content
              textarea.json-output(name="JSONOutput" placeholder="JSON output goes here") {{output.content}}
            .right
              h4
                | Transformed into a DDP Subscription!
                .span.neckbeard
                .span.magic
              br
              h5 Meteor Collection Output
              p.dash-tooltip This is the data your app will receive when you subscribe!
              textarea.meteor-output(name="MeteorOutput" placeholder="Meteor output goes here")
                +each output.result
                  | {{stringify this}}

        +else
          //- * * * THIS IS THE ACTUAL WORKING DASHBOARD * * *
          #fields
            button.delete-btn Remove Config
            +autoForm(id="ApiConfigs" type="update" doc=activeConfig collection="ApiConfigs" autosave=true)
              fieldset
                legend 1. Configuration
                +afQuickField name="name"
                p.dash-tooltip This is the name of your configuration. It must be unique in our system. You will pass us this name in your app's subscription.
                hr
                +afQuickField name="collectionName"
                p.dash-tooltip Tell us the name of your app's collection that will publish this data to your clients.
                hr
                +afQuickField name="jsonPath"
                p.dash-tooltip
                  | REST APIs return a lot of junk, but we are only interested in the array of juicy data! We have no idea where that array of data is and need you to tell us.
                  | We use the JSON Path library for you to tell us what array to use for DDP. Your path must always be an array and end with a wildcard (*). Check out the
                  a(href="https://www.npmjs.com/package/jsonpath" target="_blank") jsonpath docs here
                  | . Example:
                  .pre-span $.RelatedTopics.*
                hr
                +afQuickField name="restUrl"
                p.dash-tooltip This is the URL of the REST call. Dynamic parameters coming in a later release.
                hr
                +afQuickField name="pollInterval"
                p.dash-tooltip Tell us how often you want us to poll & diff the REST endpoint in seconds.
                hr

                 
              legend 2. Variable Inputs 
              p.dash-tooltip Want to add custom Oauth variables to your REST Endpoints URLs? That's easy. Simply add '${example}' anywhere in your url and define it's assocaited value here. 
              +if hasVariables  
               +each variableNames
                 .form-group
                  label.custom-label
                   | ${{{this}}}  
                  input(type='text' data-label='{{this}}' placeholder='Define "{{this}}" here' class='form-control variable') 
              br

              legend 3. Headers
              p.dash-tooltip You can enter your headers here. The values of the headers is only used in the test example and not in sample code.
              +each activeConfig.headers
                .row
                  .form-inline.form-group
                      label.control-label
                       | Name
                      input(type='text' value='{{this}}' placeholder='Define header name here' class='form-control headersName')
                      label.control-label
                       | Value
                      input(type='text' value='{{headerValue}}' placeholder='Define header value here' class='form-control headersValue' data-label='{{this}}')
                      button#removeHeaderButton.btn.btn-danger.btn-clear(data-label='{{this}}')
                        | &times;
              .row
                .form-inline.form-group#newHeaderFrom
                    label.control-label
                     | Name
                    input#newHeaderName(type='text' placeholder='Define header name here' class='form-control') 
                    label.control-label
                     | Value
                    input#newHeaderValue(type='text' placeholder='Define header value here' class='form-control')
                    button#addHeaderButton.btn.btn-success.btn-clear
                      | +
              +unless requestFail
                legend 4. Output
                .left
                  h4 Raw API Response
                  br
                  h5 Status Code: {{output.statusCode}}
                  br
                  h5 Headers
                  table.table              
                    thead
                      tr
                        th Header Name
                        th Header Value
                    tbody
                      +each toArray output.headers
                        tr
                          +each this
                            td {{this}}

                  h5 Body Content
                  textarea.json-output(name="JSONOutput" placeholder="JSON output goes here") {{output.content}}
                .right
                  h4
                    | Transformed into a DDP Subscription!
                    .span.neckbeard
                    .span.magic
                  br
                  h5 Your Collection
                  p.dash-tooltip This is the data your app will receive when you subscribe!
                  textarea.meteor-output(name="MeteorOutput" placeholder="Meteor output goes here")
                    +each output.result
                      | {{stringify this}}

                legend(style="padding-top: 25px;") 4. How to Use
                +with activeConfig
                  h4 Anywhere (Client and/or Server)
                  pre
                    | REST2DDP = DDP.connect("{{url}}");
                    | {{collectionName}} = new Mongo.Collection("{{collectionName}}", {connection: REST2DDP});
                    | REST2DDP.subscribe("rest2ddp", "{{name}}", {{options}});
                    | {{collectionName}}.find({}, {sort: {_id: 1}}).fetch();

              +else
                h5.failed HTTP Request Failed
                p.failed-p Once the configurations are fixed the output will be generated!
                p.failed-p {{requestFailMessage}}

      +else
        h4 &larr; Yo son, you ain't got no configs. Go make one!

    +if currentUser
      +love

